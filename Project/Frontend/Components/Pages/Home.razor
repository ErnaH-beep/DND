@page "/dashboard"
@layout Layout.MainLayout
@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage

<PageTitle>Dashboard</PageTitle>

<h1 class="dashboard-title">Task Dashboard</h1>
<p class="dashboard-subtitle">Track and manage your tasks and projects</p>

<!-- Flex container for Line Chart and Pie Chart -->
<div class="chart-section-row">
    <!-- Line Chart for Tasks Over Time -->
    <div class="chart-section">
        <h3 class="chart-title">Tasks Created Over Last 7 Days</h3>
        @if (isInitialized && tasks.Count > 0)
        {
            <LineChart @ref="lineChart" Width="750" Height="300" style="width: 800px;" />
        }
    </div>

    <!-- Pie Chart for Task Status Distribution -->
    <div class="chart-section">
        <h3 class="chart-title">Task Status Distribution</h3>
        @if (isInitialized && tasks.Count > 0)
        {
            <div class="chart-container">
                <PieChart @ref="pieChart" Width="300" Height="300" />
            </div>
        }
    </div>
</div>

<!-- Bar Chart for Task Priority Distribution -->
<div class="chart-section">
    <h3 class="chart-title">Tasks by Priority</h3>
    @if (isInitialized && tasks.Count > 0)
    {
        <div class="chart-container">
            <BarChart @ref="barChart" Width="1180" Height="300" />
        </div>
    }
</div>

@code {
    private List<Shared.Models.Task> tasks = new();
    private bool isInitialized = false;
    private bool isInitializedOnce = false;
    private LineChart lineChart = default!;
    private PieChart pieChart = default!;
    private BarChart barChart = default!;
    private LineChartOptions lineChartOptions = default!;
    private PieChartOptions pieChartOptions = default!;
    private BarChartOptions barChartOptions = default!;
    private ChartData lineChartData = default!;
    private ChartData pieChartData = default!;
    private ChartData barChartData = default!;

    protected override async Task OnInitializedAsync()
    {
        if (isInitializedOnce)
        {
            return;
        }

        isInitializedOnce = true;

        try
        {
            var client = ClientFactory.CreateClient("BackendAPI");
            var taskResponse = await client.GetFromJsonAsync<List<Shared.Models.Task>>("api/Tasks/");

            if (taskResponse != null && taskResponse.Any())
            {
                tasks = taskResponse.OrderBy(task => task.CreatedOn).ToList();
                GenerateLineChart();
                GeneratePieChart();
                GenerateBarChart();
            }
            else
            {
                Console.WriteLine("No data returned from API.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading tasks: {ex.Message}");
        }
        finally
        {
            isInitialized = true;
            StateHasChanged();
        }
    }

    private void GenerateLineChart()
    {
        var colors = ColorUtility.CategoricalTwelveColors;

        // Get the date range for the last 7 days
        var sevenDaysAgo = DateTime.Now.Date.AddDays(-7);

        // Filter data for the last 7 days and group by date
        var groupedData = tasks
            .Where(t => t.CreatedOn.Date >= sevenDaysAgo)
            .GroupBy(t => t.CreatedOn.Date)
            .Select(g => new
            {
                Date = g.Key,
                TaskCount = g.Count()
            })
            .OrderBy(g => g.Date)
            .ToList();

        // Extract labels and data from grouped results
        var labels = groupedData.Select(g => g.Date.ToString("dd-MM-yyyy")).ToList();
        var taskCountData = groupedData.Select(g => (double?)g.TaskCount).ToList();

        // Create the dataset for the line chart
        var dataset = new LineChartDataset
        {
            Label = "Tasks Created",
            Data = taskCountData,
            BackgroundColor = colors[0],
            BorderColor = colors[0],
            BorderWidth = 2,
            HoverBorderWidth = 4,
        };

        // Prepare chart data and options
        var datasets = new List<IChartDataset> { dataset };
        lineChartData = new ChartData { Labels = labels, Datasets = datasets };

        lineChartOptions = new();
        lineChartOptions.Locale = "en-US";
        lineChartOptions.Responsive = true;
        lineChartOptions.Interaction = new Interaction { Mode = InteractionMode.Index };

        lineChartOptions.Scales.X!.Title = new ChartAxesTitle { Text = "Date", Display = true };
        lineChartOptions.Scales.Y!.Title = new ChartAxesTitle { Text = "Number of Tasks", Display = true };
    }

    private void GeneratePieChart()
    {
        var colors = ColorUtility.CategoricalTwelveColors;
        var statusGroups = tasks.GroupBy(t => t.Status)
            .Select(g => new { Status = g.Key, Count = g.Count() })
            .ToList();

        pieChartData = new ChartData
        {
            Labels = statusGroups.Select(g => g.Status).ToList(),
            Datasets = new List<IChartDataset>
            {
                new PieChartDataset
                {
                    Label = "Task Status Distribution",
                    Data = statusGroups.Select(g => (double?)g.Count).ToList(),
                    BackgroundColor = colors.Take(statusGroups.Count).ToList(),
                    HoverBackgroundColor = colors.Take(statusGroups.Count).ToList()
                }
            }
        };
    }

    private void GenerateBarChart()
    {
        var colors = ColorUtility.CategoricalTwelveColors;
        var priorityGroups = tasks.GroupBy(t => t.Priority)
            .Select(g => new { Priority = g.Key, Count = g.Count() })
            .OrderBy(g => g.Priority)
            .ToList();

        barChartData = new ChartData
        {
            Labels = priorityGroups.Select(g => g.Priority).ToList(),
            Datasets = new List<IChartDataset>
            {
                new BarChartDataset
                {
                    Label = "Tasks by Priority",
                    Data = priorityGroups.Select(g => (double?)g.Count).ToList(),
                    BackgroundColor = colors.Take(priorityGroups.Count).ToList(),
                    BorderColor = colors.Take(priorityGroups.Count).ToList(),
                    BorderWidth = new List<double> { 0 }
                }
            }
        };

        barChartOptions = new();
        barChartOptions.Responsive = true;
        barChartOptions.Interaction = new Interaction { Mode = InteractionMode.Index };

        barChartOptions.Scales.X!.Title = new ChartAxesTitle { Text = "Priority Level", Display = true };
        barChartOptions.Scales.Y!.Title = new ChartAxesTitle { Text = "Number of Tasks", Display = true };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                if (lineChartData != null && isInitialized)
                {
                    await lineChart.InitializeAsync(lineChartData, lineChartOptions);
                }

                if (pieChartData != null && isInitialized)
                {
                    await pieChart.InitializeAsync(pieChartData, pieChartOptions);
                }   

                if (barChartData != null && isInitialized)
                {
                    await barChart.InitializeAsync(barChartData, barChartOptions);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error initializing charts: {ex.Message}");
            }
        }
        await base.OnAfterRenderAsync(firstRender);
    }
}
