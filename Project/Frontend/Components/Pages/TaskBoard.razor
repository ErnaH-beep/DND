@page "/tasks"
@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavigationManager
@using Shared.Models

<div class="d-flex justify-content-between align-items-center">
    <h3>Task Board</h3>
    <button class="btn btn-primary mb-3" @onclick="async () => await createTaskModal.ShowModal()">
        <i class="bi bi-plus"></i> Add New Task
    </button>
    <CreateTaskModal @ref="createTaskModal" OnSubmitSuccess="LoadTasks" />
</div>

@if (Tasks.Count == 0)
{
    <div class="d-flex flex-column justify-content-center align-items-center vh-75">
        <p class="no-data-available-text">No tasks found.</p>
    </div>
}
else
{
    <table class="table table-striped table-hover table-rounded">
        <thead>
            <tr>
                <th>Title</th>
                <th>Description</th>
                <th>Due Date</th>
                <th>Status</th>
                <th>Priority</th>
                <th><!-- Actions column --></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var task in Tasks)
            {
                <tr>
                    <td>@task.Title</td>
                    <td>@task.Description</td>
                    <td>@task.DueDate.ToShortDateString()</td>
                    <td>
                        <select class="form-select" value="@task.Status" @onchange="@(e => UpdateTaskStatus((task, e.Value?.ToString() ?? task.Status)))">
                            <option value="Todo">To Do</option>
                            <option value="InProgress">In Progress</option>
                            <option value="Done">Done</option>
                        </select>
                    </td>
                    <td><span class="badge bg-@GetPriorityColor(task.Priority)">@task.Priority</span></td>
                    <td>
                        <div class="dropdown">
                            <button class="btn btn-link p-0 actions-dropdown-btn" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="bi bi-three-dots-vertical"></i>
                            </button>
                            <ul class="dropdown-menu">
                                <li><button class="dropdown-item" @onclick="() => EditTask(task)">Edit</button></li>
                                <li><button class="dropdown-item" @onclick="() => DeleteTask(task)">Delete</button></li>
                            </ul>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private CreateTaskModal? createTaskModal;
    private List<Shared.Models.Task> Tasks = new();

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        await LoadTasks();
    }

    private string GetPriorityColor(string priority) => priority switch
    {
        "High" => "danger",
        "Medium" => "warning",
        "Low" => "success",
        _ => "secondary"
    };

    private async System.Threading.Tasks.Task UpdateTaskStatus((Shared.Models.Task Task, string NewStatus) args)
    {
        var (task, newStatus) = args;
        task.Status = newStatus;

        var client = ClientFactory.CreateClient("BackendAPI");
        await client.PutAsJsonAsync($"api/Tasks/{task.Id}/status", newStatus);
        await LoadTasks();
    }

    private async System.Threading.Tasks.Task LoadTasks()
    {
        var client = ClientFactory.CreateClient("BackendAPI");
        var tasks = await client.GetFromJsonAsync<List<Shared.Models.Task>>("api/Tasks");
        if (tasks != null)
        {
            Tasks = tasks;
            StateHasChanged();
        }
    }

    private void EditTask(Shared.Models.Task task)
    {
        // Implement edit functionality
    }

    private async System.Threading.Tasks.Task DeleteTask(Shared.Models.Task task)
    {
        // Implement delete functionality
    }
}