@inject IHttpClientFactory ClientFactory

<Modal @ref="deleteTaskModal" title="Delete Task" IsVerticallyCentered="true" UseStaticBackdrop="true" CloseOnEscape="false">
    <BodyTemplate>
        @if (SelectedTask != null)
        {
            <p><b>You are about to delete the following task:</b></p>
            <p><b>Title:</b> @SelectedTask.Title</p>
            <p><b>Description:</b> @SelectedTask.Description</p>
            <p><b>Due Date:</b> @SelectedTask.DueDate.ToShortDateString()</p>
            <p><b>Priority:</b> @SelectedTask.Priority</p>
            <p><b>Status:</b> @SelectedTask.Status</p>
            <p><b>Are you sure you want to delete this task?</b></p>
            <button class="btn btn-warning w-100 mt-3" @onclick="ConfirmDelete">Delete Task</button>
        }
        else
        {
            <p>Loading task data...</p>
        }
    </BodyTemplate>
</Modal>

@if (errorMessage != null)
{
    <div class="alert alert-danger mt-3">
        @errorMessage
    </div>
}

@code {
    [Parameter] public EventCallback OnDeleteSuccess { get; set; }

    private Shared.Models.Task? SelectedTask { get; set; }
    private Modal deleteTaskModal = default!;
    private string? errorMessage;

    public async Task ShowModal(int taskId)
    {
        await LoadTask(taskId);
        await deleteTaskModal.ShowAsync();
    }

    private async Task LoadTask(int taskId)
    {
        try
        {
            var client = ClientFactory.CreateClient("BackendAPI");
            SelectedTask = await client.GetFromJsonAsync<Shared.Models.Task>($"api/Tasks/{taskId}");

            if (SelectedTask == null)
            {
                errorMessage = "Failed to load task data.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading task: {ex.Message}";
        }
    }

    private async Task ConfirmDelete()
    {
        if (SelectedTask == null)
        {
            errorMessage = "No task selected.";
            return;
        }

        try
        {
            var client = ClientFactory.CreateClient("BackendAPI");
            var response = await client.DeleteAsync($"api/Tasks/{SelectedTask.Id}");

            if (response.IsSuccessStatusCode)
            {
                await deleteTaskModal.HideAsync();
                await OnDeleteSuccess.InvokeAsync();
            }
            else
            {
                errorMessage = $"Failed to delete task: {await response.Content.ReadAsStringAsync()}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }
}
